variant: flatcar
version: 1.1.0
passwd:
  users:
    - name: ${server.user.username}
      gecos: ${server.user.fullname}
      groups: ${jsonencode(server.user.groups)}
      password_hash: ${password_hash}
      ssh_authorized_keys: ${jsonencode(ssh_keys)}
storage:
  files:
    - path: /etc/hostname
      overwrite: true
      contents:
        inline: ${server.name}
    - path: /etc/sysctl.d/50-network.conf
      contents:
        inline: |
          net.core.rmem_max=8388608
          net.core.wmem_max=8388608
          net.ipv4.conf.all.forwarding=1
          net.ipv6.conf.all.forwarding=1
    - path: /etc/systemd/network/50-device-defaults.link
      contents:
        inline: |
          [Link]
          GRO=off
          UDPGROForwarding=on
    - path: /etc/systemd/network/50-tailscale.network
      contents:
        inline: |
          [Match]
          Name=tailscale*

          [Link]
          Unmanaged=yes
  links:
    - path: /etc/localtime
      overwrite: true
      target: /usr/share/zoneinfo/${server.config.timezone}
    - path: /etc/resolv.conf
      overwrite: true
      target: /run/systemd/resolve/stub-resolv.conf
%{ if contains(server.flags, "docker") ~}
systemd:
  units:
    - name: caddy.service
      enabled: true
      contents: |
        [Unit]
        Description=Caddy
        After=network-online.target
        Wants=network-online.target

        [Service]
        ExecStartPre=-/bin/docker network create ${default.organisation}
        ExecStartPre=-/bin/docker volume create %N_data
        ExecStartPre=-/bin/docker kill %N
        ExecStartPre=-/bin/docker rm %N
        ExecStartPre=/bin/docker pull ghcr.io/maxexcloo/caddy
        ExecStart=/bin/docker run --add-host host.docker.internal:host-gateway --name %N --network ${default.organisation} --restart unless-stopped -l "caddy_0=(external)" -l "caddy_0.tls=${default.email}" -l "caddy_1=(internal)" -l "caddy_1.tls=${default.email}" -l "caddy_1.tls.dns=cloudflare ${cloudflare_api_token}" -l "caddy_1.tls.resolvers=1.1.1.1" -p 80:80 -p 443:443 -v /var/run/docker.sock:/var/run/docker.sock -v %N_data:/data ghcr.io/maxexcloo/caddy
        TimeoutStartSec=0

        [Install]
        WantedBy=multi-user.target
    - name: portainer-agent.service
      enabled: true
      contents: |
        [Unit]
        Description=Portainer Agent
        After=network-online.target
        Wants=network-online.target

        [Service]
        ExecStartPre=-/bin/docker kill %N
        ExecStartPre=-/bin/docker rm %N
        ExecStartPre=/bin/docker pull portainer/agent
        ExecStart=/bin/docker run --name %N --restart unless-stopped -p 9001:9001 -v /:/host -v /var/lib/docker/volumes:/var/lib/docker/volumes -v /var/run/docker.sock:/var/run/docker.sock portainer/agent
        TimeoutStartSec=0

        [Install]
        WantedBy=multi-user.target
%{ if contains(server.flags, "cloudflared") ~}
    - name: cloudflared.service
      enabled: true
      contents: |
        [Unit]
        Description=Cloudflared
        After=network-online.target
        Wants=network-online.target

        [Service]
        ExecStartPre=-/bin/docker kill %N
        ExecStartPre=-/bin/docker rm %N
        ExecStartPre=/bin/docker pull cloudflare/cloudflared
        ExecStart=/bin/docker run --name %N --network host --restart unless-stopped cloudflare/cloudflared tunnel run --token ${cloudflare_tunnel_token}
        TimeoutStartSec=0

        [Install]
        WantedBy=multi-user.target
%{ endif ~}
%{ if contains(server.flags, "tailscale") ~}
    - name: tailscale.service
      enabled: true
      contents: |
        [Unit]
        Description=Tailscale
        After=network-online.target
        Wants=network-online.target

        [Service]
        ExecStartPre=-/bin/docker kill %N
        ExecStartPre=-/bin/docker rm %N
        ExecStartPre=/bin/docker pull tailscale/tailscale
        ExecStart=/bin/docker run --cap-add NET_ADMIN --cap-add NET_RAW --device /dev/net/tun --name %N --network host --restart unless-stopped -e TS_ACCEPT_DNS=true -e TS_AUTH_ONCE=true -e TS_AUTHKEY=${tailscale_tailnet_key} -e TS_EXTRA_ARGS=--advertise-exit-node -e TS_HOSTNAME=${k} -e TS_STATE_DIR=/data -e TS_USERSPACE=false -v /etc/resolv.conf:/etc/resolv.conf -v /var/run/dbus:/var/run/dbus -v /run/systemd/resolve:/run/systemd/resolve -v %N_data:/data tailscale/tailscale
        TimeoutStartSec=0

        [Install]
        WantedBy=multi-user.target
%{ endif ~}
%{ endif ~}
